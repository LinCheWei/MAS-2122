import time
import os
import logging

import compas_slicer.utilities as utils
from compas_slicer.pre_processing import move_mesh_to_point
from compas_slicer.slicers import PlanarSlicer
from compas_slicer.post_processing import generate_brim
from compas_slicer.post_processing import generate_raft
from compas_slicer.post_processing import simplify_paths_rdp
from compas_slicer.post_processing import seams_smooth
from compas_slicer.print_organization import PlanarPrintOrganizer
from compas_slicer.print_organization import set_extruder_toggle
from compas_slicer.print_organization import add_safety_printpoints
from compas_slicer.print_organization import set_linear_velocity_constant
from compas_slicer.print_organization import set_blend_radius
from compas_slicer.utilities import save_to_json
# from compas_view2 import app  # installation steps in slicer web docu

from compas.datastructures import Mesh
from compas.geometry import Point

# Then we initiate logging to make sure that messages generated by compas_slicer are printed in the terminal.
logger = logging.getLogger('logger')
logging.basicConfig(format='%(levelname)s-%(message)s', level=logging.INFO)

# Next we point to the data folder
DATA = os.path.join(os.path.dirname(__file__), 'data')
OUTPUT_DIR = utils.get_output_directory(DATA)
TRIANGLE = '211022_A042_paDemo-Triangle_PF v3.obj'
RECTANGLE = '211022_A042_paDemo-Rectangle_PF v2.obj'
CYLINDER = '211022_A042_paDemo-Cylinder_PF v2.obj'

MODEL = RECTANGLE


print(DATA)
print(OUTPUT_DIR)
print(MODEL)

#
LAYER_HEIGHT = 5   # [mm]
PRINT_SPEED = 250.0 # [mm/s]
ZONE = 5

# Make a compas mesh out of the obj format
compas_mesh = Mesh.from_obj(os.path.join(DATA, MODEL))

# init slicer
slicer = PlanarSlicer(compas_mesh, slicer_type="default", layer_height=LAYER_HEIGHT)

# slicen
slicer.slice_model()

# print more information
slicer.printout_info()

# safe to json
save_to_json(slicer.to_data(), OUTPUT_DIR, 'slicer_data.json')

# inital print organizer used for creating print path (add parmaters like speed, zone, etc.)
print_organizer = PlanarPrintOrganizer(slicer)

# make print points
print_organizer.create_printpoints()

# set print parameters
set_extruder_toggle(print_organizer, slicer)
set_linear_velocity_constant(print_organizer, v=PRINT_SPEED)
set_blend_radius(print_organizer, d_fillet=ZONE)


# print more information
print_organizer.printout_info()


# make print path
printpoints_data = print_organizer.output_printpoints_dict()


# safe to json
save_to_json(printpoints_data, OUTPUT_DIR, 'out_printpoints.json')



print("finish")
